{"name":"Cachingmysql","tagline":"A small query caching example in PHP with MySQL","body":"# Why Cache SQL Queries?\r\nSome SQL queries, as you've likely discovered, are expensive to execute. Complex queries of large databases, even when optimized, can take a significant amount of time -- so much so that it can inhibit pleasant UX. By caching complex queries which occur often, we can optimize-away the long wait times associated with those expensive SQL queries which occur the most often.\r\n\r\n# How Can I Cache SQL Queries?\r\nSQL queries can be cached in one of two ways -- they can be cached SQL-server side, or 'locally' inside the PHP script which is querying the database. \r\n###Caching on the SQL server\r\nThe first method is to have your SQL database cache the query internally using SQL 'hints' inside of database queries. \r\nThis can be achieved using the `MYSQLND_QC_ENABLE_SWITCH` hint, which, when wrapped inside an SQL query, tells the DBMS to save the output of that query for future use.\r\n###Caching in the PHP environment\r\nThe second method is to save the results of a SQL query inside an associative array in the cache of a PHP process. This can be achieved using a library called `Memcached` which allows a PHP user to store data in local cache.\r\n###Cool. Now show me the code!\r\nCheck out this repository to see a simple example of both SQL-side caching and PHP-side caching!\r\n\r\n##A Third Approach\r\nSQL can also cache queries server-side using a slightly more sophisticated rule-based methodology. In PHP this is done using `mysqlnd_set_cache_condition()`. We won't get into that here, but you can read more [here] (http://php.net/manual/en/function.mysqlnd-qc-set-cache-condition.php)\r\n\r\n##Further Reference\r\nVisit [the PHP documentation](http://php.net/manual/en/mysqlnd-qc.quickstart.caching.php) for more information about SQL caching.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}