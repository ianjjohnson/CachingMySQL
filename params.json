{"name":"Cachingmysql","tagline":"A small query caching example in PHP with MySQL","body":"# Why Cache SQL Queries?\r\nSome SQL queries, as you've likely discovered, are expensive to execute. Complex queries of large databases, even when optimized, can take a significant amount of time -- so much so that it can inhibit pleasant UX. By caching complex queries which occur often, we can optimize-away the long wait times associated with those expensive SQL queries which occur the most often.\r\n\r\n# How Can I Cache SQL Queries?\r\nSQL queries can be cached in one of two ways -- they can be cached SQL-server side, or 'locally' inside the PHP script which is querying the database. In this demo, we'll explore both ways to use caching assuming you've already built a PDO object called db which connects to your SQL database. It is assumed that a reader is running Ubuntu 14, has the LAMP stack installed, and has a reasonable level of aptitude with the Linux terminal.\r\n\r\n##Caching on the SQL server\r\nThe first method is to have your SQL database cache the query internally using SQL 'hints' inside of database queries. \r\nThis can be achieved using the `SQL_CACHE` hint, which, when wrapped inside an SQL SELECT query, tells the DBMS to save the output of that query for future use.\r\n\r\n    //The SQL_CACHE flag at the start of the query tells SQL to cache the result.\r\n    $select = $db->query(\"SELECT SQL_CACHE * FROM table\");\r\n\r\nSubsequent queries to the database with the same query meaning (e.g. anything which provides the same functionality as 'select * from table' in this case) will return the cached result from the SQL server unless something has changed on the server side.\r\n\r\n##Caching in the PHP environment\r\nThe second method is to save the results of a SQL query inside an associative array in the cache of a PHP process. This can be achieved using a library called `Memcached` which allows a PHP user to store data in local cache.\r\n\r\n###Installing Memcached\r\nInstalling Memcached is very simple. Simply use any package manager to install `php5-memcached`. \r\nFor example, use `sudo apt-get install php5-memcached`.\r\nThis will automatically install and configure Memcached. A more in depth tutorial on Memcached and its settings can be found on [Digital Ocean's help site](https://www.digitalocean.com/community/tutorials/how-to-install-and-use-memcache-on-ubuntu-14-04), but for this example you won't need to modify any Memcached settings.\r\n\r\n\r\n###Using Memcached\r\nIn the following code snippet a Memcached object is constructed and connected \r\n\r\n    $cache = new Memcached(); //Build a new memcached object\r\n\t$cache->addServer('localhost', 11211); //11211 should always be the second parameter\r\n        //(read the Memcached settings article above for a more in-depth explanation)\r\n\r\n\t$key = 'some SQL query'; //This is the key for a key-value pair in the cache object\r\n\t$result = $cache->get($key); //See if there's data for this query in the cache\r\n\r\n\t//If there's nothing in the cache, we need to query the SQL server\r\n\tif (!$result) {\r\n        //Execute the query on SQL server\r\n  \t    $select = $db->query(\"SELECT first_name FROM employee where last_name = 'bob'\"); \r\n        $result = $select->fetchAll(PDO::FETCH_OBJ); //Fetch result \r\n   \t    $cache->set($key, serialize($row)); //Load the result into the cache\r\n\t}\r\n\r\nUnlike SQL-side caching, this caching approach assumes that no changes have been made to the database since the last time the query was cached. This can be a dangerous assumption. Use this carefully!\r\n\r\n###Cool. Now show me the code!\r\nCheck out [this repository](github.com/ianjjohnson/CachingMySQL) to see a simple example of both SQL-side caching and PHP-side caching!\r\n\r\n###SQL-Side troubles?\r\nSome SQL servers don't default to allowing server-side caching. For an in-depth exploration of the SQL server-side settings caching, check out [this page](http://www.howtogeek.com/howto/programming/speed-up-your-web-site-with-mysql-query-caching/)\r\n\r\n##A Third Approach\r\nSQL can also cache queries server-side using a slightly more sophisticated rule-based methodology. In PHP this is done using `mysqlnd_set_cache_condition()`. We won't get into that here, but you can read more [here] (http://php.net/manual/en/function.mysqlnd-qc-set-cache-condition.php)\r\n\r\n##Further Reference\r\nVisit [the PHP documentation](http://php.net/manual/en/mysqlnd-qc.quickstart.caching.php) for more information about SQL caching.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}